---
import BaseLayout from '../components/BaseLayout.astro';
import { getCollection } from 'astro:content';
import LeadStory from '../components/LeadStory.astro';
import LatestPosts from '../components/LatestPosts.astro';
import TechQuote from '../components/TechQuote.astro';
import WhatsHappening from '../components/WhatsHappening.astro';

// Get latest blog posts
const posts = await getCollection('blog');
const latestPosts = posts
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
    .slice(0, 3);

const currentDate = new Date().toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
});

const volumeNumber = "Vol. XCIV";
const issueNumber = "No. 51,839";
---

<BaseLayout title="Welcome to My Personal Chronicle">
    <div class="newspaper-header">
        <div class="top-banner">
            <div class="edition-info">
                <span class="volume">{volumeNumber}</span>
                <span class="issue">{issueNumber}</span>
            </div>
            <div class="masthead">
                <div class="masthead-top">THE</div>
                <div class="masthead-main">DIGITAL ALMANAC</div>
                <div class="masthead-motto">"Crafting Digital Stories, One Line at a Time"</div>
            </div>
            <div class="price-info">
                <span class="price">DIGITAL</span>
                <span class="location">EDITION</span>
            </div>
        </div>
        <div class="date-banner">
            <div class="date-section">
                <span class="day-name">{new Date().toLocaleDateString('en-US', { weekday: 'long' }).toUpperCase()}</span>
                <span class="date-divider">·</span>
                <span class="full-date">
                    {new Date().toLocaleDateString('en-US', {
                        month: 'long',
                        day: 'numeric',
                        year: 'numeric'
                    }).toUpperCase()}
                </span>
            </div>
            <div class="weather-section">
                <span class="weather-info">72°F - SUNNY</span>
                <span class="date-divider">·</span>
                <span class="forecast">FORECAST: CLEAR SKIES</span>
            </div>
        </div>
    </div>

    <main class="newspaper-grid">
        <!-- Lead Story -->
        <LeadStory/>

        <LatestPosts/>

         <TechQuote/>
    </main>
        <!-- Tech and Happening Section Wrapper -->
        <div class="tech-happening-wrapper"></div>
                <!-- Tech Bulletin -->
                <section class="bento-item tech-bulletin">
                    <div class="column-header">Tech Bulletin</div>
                    <div class="bulletin-grid">
                        <div class="bulletin-item">
                            <span class="bulletin-tag">Frontend</span>
                            <h3>React</h3>
                            <p>Building responsive and dynamic user interfaces</p>
                        </div>
                        <div class="bulletin-item">
                            <span class="bulletin-tag">Backend</span>
                            <h3>Node.js</h3>
                            <p>Powering server-side applications</p>
                        </div>
                        <div class="bulletin-item">
                            <span class="bulletin-tag">Database</span>
                            <h3>PostgreSQL</h3>
                            <p>Robust data management solutions</p>
                        </div>
                    </div>
                </section>

                <WhatsHappening/>
         <!-- Daily Crossword -->
         <section class="bento-item daily-crossword">
            <div class="column-header" style="color: white;">Crossword Puzzle</div>
            <div class="crossword-container">
                <div class="game-section">
                    <div class="crossword-grid">
                        <div class="grid-row">
                            <div class="cell" data-number="1" data-word="react,rust"><span class="number">1</span><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="react"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="react"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="react"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="react"><input type="text" maxlength="1" /></div>
                            <div class="cell blocked"></div>
                            <div class="cell blocked"></div>
                        </div>
                        <div class="grid-row">
                            <div class="cell" data-word="rust"><input type="text" maxlength="1" /></div>
                            <div class="cell blocked"></div>
                            <div class="cell" data-number="2" data-word="node"><span class="number">2</span><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="node"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="node"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="node"><input type="text" maxlength="1" /></div>
                            <div class="cell blocked"></div>
                        </div>
                        <div class="grid-row">
                            <div class="cell" data-word="rust"><input type="text" maxlength="1" /></div>
                            <div class="cell blocked"></div>
                            <div class="cell" data-number="3" data-word="swift"><span class="number">3</span><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="swift"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="swift"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="swift"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="swift"><input type="text" maxlength="1" /></div>
                        </div>
                        <div class="grid-row">
                            <div class="cell" data-word="rust"><input type="text" maxlength="1" /></div>
                            <div class="cell blocked"></div>
                            <div class="cell" data-number="4" data-word="linux"><span class="number">4</span><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="linux"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="linux"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="linux"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="linux"><input type="text" maxlength="1" /></div>
                        </div>
                        <div class="grid-row">
                            <div class="cell blocked"></div>
                            <div class="cell" data-number="5" data-word="astro"><span class="number">5</span><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="astro"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="astro"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="astro"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="astro"><input type="text" maxlength="1" /></div>
                            <div class="cell blocked"></div>
                        </div>
                        <div class="grid-row">
                            <div class="cell blocked"></div>
                            <div class="cell" data-number="6" data-word="redis"><span class="number">6</span><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="redis"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="redis"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="redis"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="redis"><input type="text" maxlength="1" /></div>
                            <div class="cell blocked"></div>
                        </div>
                        <div class="grid-row">
                            <div class="cell blocked"></div>
                            <div class="cell" data-number="7" data-word="mongo"><span class="number">7</span><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="mongo"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="mongo"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="mongo"><input type="text" maxlength="1" /></div>
                            <div class="cell" data-word="mongo"><input type="text" maxlength="1" /></div>
                            <div class="cell blocked"></div>
                        </div>
                    </div>
                    <div class="game-controls">
                        <button class="check-answers">Check Answers</button>
                        <button class="clear-grid">Clear Grid</button>
                    </div>
                </div>
                <div class="crossword-clues">
                    <div class="clues-section">
                        <h3>Across</h3>
                        <ol>
                            <li data-clue="1">Popular JavaScript library for building user interfaces (5)</li>
                            <li data-clue="2">JavaScript runtime environment (4)</li>
                            <li data-clue="3">Apple's programming language (5)</li>
                            <li data-clue="4">Open-source Unix-like operating system (5)</li>
                            <li data-clue="5">Modern static site builder with island architecture (5)</li>
                            <li data-clue="6">In-memory data structure store (5)</li>
                            <li data-clue="7">NoSQL database system (5)</li>
                        </ol>
                    </div>
                    <div class="clues-section">
                        <h3>Down</h3>
                        <ol>
                            <li data-clue="1">Systems programming language focused on safety (4)</li>
                        </ol>
                    </div>
                </div>
            </div>
            <style>
                .daily-crossword {
                    padding: 20px;
                    background: #000000;
                    border-radius: 12px;
                    color: white;
                }

                .crossword-container {
                    display: flex;
                    flex-direction: column;
                    gap: 20px;
                    margin-top: 20px;
                }

                @media (min-width: 768px) {
                    .crossword-container {
                        flex-direction: row;
                    }
                }

                .game-section {
                    flex: 1;
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    gap: 20px;
                }

                .crossword-grid {
                    display: flex;
                    flex-direction: column;
                    gap: 0;
                    border: 2px solid #333;
                    padding: 2px;
                    background: #333;
                    transition: transform 1s;
                    transform-style: preserve-3d;
                    position: relative;
                }

                .crossword-grid.success {
                    transform: rotateY(180deg);
                }

                .crossword-grid::after {
                    content: 'CONGRATULATIONS!\A You solved the puzzle!';
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                    align-items: center;
                    font-size: 1.2em;
                    font-weight: bold;
                    color: #4CAF50;
                    transform: rotateY(180deg);
                    backface-visibility: hidden;
                    text-align: center;
                    white-space: pre;
                    padding: 10px;
                    box-sizing: border-box;
                    text-shadow: 0 1px 2px rgba(0,0,0,0.2);
                    letter-spacing: 0.5px;
                    border: 2px solid #4CAF50;
                    line-height: 1.5;
                }

                @media (max-width: 480px) {
                    .crossword-grid::after {
                        font-size: 1em;
                        padding: 5px;
                    }
                }

                .grid-row {
                    display: flex;
                    gap: 0;
                    backface-visibility: hidden;
                }

                .cell {
                    width: 45px;
                    height: 45px;
                    border: 1px solid #333;
                    background: white;
                    position: relative;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                }

                .cell input {
                    width: 100%;
                    height: 100%;
                    border: none;
                    background: transparent;
                    text-align: center;
                    font-size: 1.2em;
                    color: #000;
                    text-transform: uppercase;
                }

                .cell input:focus {
                    outline: none;
                    background: #f0f0f0;
                }

                .cell .number {
                    position: absolute;
                    top: 2px;
                    left: 2px;
                    font-size: 0.7em;
                    color: #000;
                }

                .game-controls {
                    display: flex;
                    gap: 10px;
                }

                .game-controls button {
                    padding: 8px 16px;
                    border: none;
                    border-radius: 4px;
                    background: #333;
                    color: white;
                    cursor: pointer;
                    transition: background 0.2s;
                }

                .game-controls button:hover {
                    background: #444;
                }

                .check-answers:hover {
                    background: #444;
                }

                .clear-grid:hover {
                    background: #cc0000 !important;
                    color: white;
                }

                .game-controls button.check-answers {
                    background: #333;
                    color: white;
                }

                .game-controls button.check-answers:hover {
                    background: #444;
                }

                .game-controls button.clear-grid {
                    background: #333;
                    color: white;
                }

                .game-controls button.clear-grid:hover {
                    background: #cc0000;
                }

                .crossword-clues {
                    flex: 1;
                    display: flex;
                    flex-direction: column;
                    gap: 20px;
                    padding: 20px;
                    background: #111;
                    border-radius: 8px;
                    max-height: 500px;
                    overflow-y: auto;
                }

                .clues-section h3 {
                    margin: 0 0 10px 0;
                    color: white;
                    font-size: 1.2em;
                }

                .clues-section ol {
                    list-style-position: inside;
                    padding: 0;
                    margin: 0;
                }

                .clues-section li {
                    margin-bottom: 8px;
                    color: #ddd;
                    cursor: pointer;
                    transition: color 0.2s;
                }

                .clues-section li:hover {
                    color: white;
                }

                @media (max-width: 768px) {
                    .cell {
                        width: 40px;
                        height: 40px;
                    }

                    .crossword-clues {
                        max-height: 300px;
                    }
                }
                .tech-happening-wrapper {
                    display: flex;
                    gap: 20px;
                    width: 100%;
                }

                .tech-bulletin {
                    flex: 1;
                    min-width: 25%;
                }

                .whats-happening {
                    flex: 3;
                }

                @media (max-width: 768px) {
                    .tech-happening-wrapper {
                        flex-direction: column;
                    }

                    .tech-bulletin,
                    .whats-happening {
                        width: 100%;
                    }
                }
            </style>
        </section>

        <!-- Quick Reference -->
        <section class="bento-item quick-reference">
            <div class="column-header">Quick Reference</div>
            <div class="reference-grid">
                <a href="/blog" class="ref-item">
                    <span class="ref-icon">📚</span>
                    <span class="ref-text">Articles Archive</span>
                </a>
                <a href="/projects" class="ref-item">
                    <span class="ref-icon">💻</span>
                    <span class="ref-text">Project Portfolio</span>
                </a>
                <a href="/about" class="ref-item">
                    <span class="ref-icon">👤</span>
                    <span class="ref-text">About Author</span>
                </a>
                <a href="/contact" class="ref-item">
                    <span class="ref-icon">✉️</span>
                    <span class="ref-text">Get in Touch</span>
                </a>
            </div>
        </section>
    </main>
</BaseLayout>

<script>
    async function fetchTechQuote() {
        try {
            const response = await fetch('https://api.quotable.io/random?tags=technology,science');
            const data = await response.json();

            document.getElementById('tech-quote').textContent = data.content;
            document.getElementById('quote-author').textContent = `— ${data.author}`;
        } catch (error) {
            console.error('Error fetching quote:', error);
            document.getElementById('tech-quote').textContent = 'Technology is best when it brings people together.';
            document.getElementById('quote-author').textContent = '— Matt Mullenweg';
        }
    }

    // Fetch quote on page load
    fetchTechQuote();

    // Refresh quote every 5 minutes
    setInterval(fetchTechQuote, 300000);
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const grid = document.querySelector('.crossword-grid');
        const inputs = grid.querySelectorAll('input');
        const checkButton = document.querySelector('.check-answers');
        const clearButton = document.querySelector('.clear-grid');
        const clues = document.querySelectorAll('.clues-section li');

        inputs.forEach(input => {
            input.addEventListener('input', (e) => {
                if (e.target.value) {
                    e.target.value = e.target.value.toUpperCase();
                    const next = findNextCell(e.target);
                    if (next) next.focus();
                }
            });

            input.addEventListener('keydown', (e) => {
                const target = e.target;

                switch(e.key) {
                    case 'ArrowRight':
                        e.preventDefault();
                        const nextRight = findNextCell(target);
                        if (nextRight) nextRight.focus();
                        break;
                    case 'ArrowLeft':
                        e.preventDefault();
                        const prevLeft = findPrevCell(target);
                        if (prevLeft) prevLeft.focus();
                        break;
                    case 'ArrowUp':
                        e.preventDefault();
                        const above = findCellAbove(target);
                        if (above) above.focus();
                        break;
                    case 'ArrowDown':
                        e.preventDefault();
                        const below = findCellBelow(target);
                        if (below) below.focus();
                        break;
                    case 'Backspace':
                        if (target.value === '') {
                            e.preventDefault();
                            const prev = findPrevCell(target);
                            if (prev) {
                                prev.focus();
                                prev.value = '';
                            }
                        }
                        break;
                    case 'Delete':
                        if (target.value === '') {
                            const next = findNextCell(target);
                            if (next) next.focus();
                        }
                        break;
                }
            });
        });

        function findNextCell(currentCell) {
            const currentRow = currentCell.closest('.grid-row');
            const cells = Array.from(currentRow.querySelectorAll('input'));
            const currentIndex = cells.indexOf(currentCell);
            return cells[currentIndex + 1] || null;
        }

        function findPrevCell(currentCell) {
            const currentRow = currentCell.closest('.grid-row');
            const cells = Array.from(currentRow.querySelectorAll('input'));
            const currentIndex = cells.indexOf(currentCell);
            return cells[currentIndex - 1] || null;
        }

        function findCellAbove(currentCell) {
            const currentRow = currentCell.closest('.grid-row');
            const allRows = Array.from(grid.querySelectorAll('.grid-row'));
            const currentRowIndex = allRows.indexOf(currentRow);
            if (currentRowIndex > 0) {
                const aboveRow = allRows[currentRowIndex - 1];
                const cells = Array.from(currentRow.querySelectorAll('input'));
                const cellIndex = cells.indexOf(currentCell);
                const aboveCells = Array.from(aboveRow.querySelectorAll('input'));
                return aboveCells[cellIndex] || null;
            }
            return null;
        }

        function findCellBelow(currentCell) {
            const currentRow = currentCell.closest('.grid-row');
            const allRows = Array.from(grid.querySelectorAll('.grid-row'));
            const currentRowIndex = allRows.indexOf(currentRow);
            if (currentRowIndex < allRows.length - 1) {
                const belowRow = allRows[currentRowIndex + 1];
                const cells = Array.from(currentRow.querySelectorAll('input'));
                const cellIndex = cells.indexOf(currentCell);
                const belowCells = Array.from(belowRow.querySelectorAll('input'));
                return belowCells[cellIndex] || null;
            }
            return null;
        }

        checkButton.addEventListener('click', () => {
            inputs.forEach(input => {
                const cell = input.closest('.cell');
                const words = cell.dataset.word?.split(',') || [];
                const isCorrect = words.some(word => {
                    const allCells = document.querySelectorAll(`[data-word="${word}"]`);
                    const word_input = Array.from(allCells).map(cell => cell.querySelector('input').value).join('');
                    return word_input.toLowerCase() === word.toLowerCase();
                });

                if (input.value) {
                    input.classList.remove('correct', 'incorrect');
                    input.classList.add(isCorrect ? 'correct' : 'incorrect');
                } else {
                    input.classList.remove('correct', 'incorrect');
                }
            });
        });

        clearButton.addEventListener('click', () => {
            inputs.forEach(input => {
                input.value = '';
                input.classList.remove('correct', 'incorrect');
            });
        });

        clues.forEach(clue => {
            clue.addEventListener('click', () => {
                const clueNumber = clue.dataset.clue;
                const targetCell = grid.querySelector(`[data-number="${clueNumber}"]`);
                if (targetCell) {
                    const input = targetCell.querySelector('input');
                    if (input) input.focus();
                }
            });
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const crosswordGrid = document.querySelector('.crossword-grid');
        const gameSection = document.querySelector('.game-section');

        const answers = {
            'react': 'REACT',
            'rust': 'RUST',
            'node': 'NODE',
            'swift': 'SWIFT',
            'linux': 'LINUX',
            'astro': 'ASTRO',
            'redis': 'REDIS',
            'mongo': 'MONGO'
        };

        function getWordsForCell(cell) {
            return cell.dataset.word.split(',');
        }

        function isIntersectionCell(cell) {
            return getWordsForCell(cell).length > 1;
        }

        function checkWord(word, cells) {
            const wordCells = cells.filter(cell => getWordsForCell(cell).includes(word));
            const inputValues = wordCells
                .map(cell => cell.querySelector('input').value.toUpperCase())
                .join('');

            const isCorrect = inputValues === answers[word];

            // Update cell classes based on correctness
            wordCells.forEach(cell => {
                if (isIntersectionCell(cell)) {
                    // Special handling for intersection cells
                    const allWords = getWordsForCell(cell);
                    const cellValue = cell.querySelector('input').value.toUpperCase();

                    // Check if the current letter matches all words at this position
                    const isCorrectForAll = allWords.every(w => {
                        const wordCells = cells.filter(c => getWordsForCell(c).includes(w));
                        const pos = wordCells.indexOf(cell);
                        return cellValue === answers[w][pos];
                    });

                    cell.classList.toggle('correct', isCorrectForAll);
                    cell.classList.toggle('incorrect', !isCorrectForAll);
                } else {
                    cell.classList.toggle('correct', isCorrect);
                    cell.classList.toggle('incorrect', !isCorrect);
                }
            });

            return isCorrect;
        }

        function validateGrid() {
            const cells = Array.from(document.querySelectorAll('.cell:not(.blocked)'));
            cells.forEach(cell => cell.classList.remove('correct', 'incorrect'));

            const words = [...new Set(cells.flatMap(cell => getWordsForCell(cell)))];
            return words.every(word => checkWord(word, cells));
        }

        document.querySelector('.check-answers').addEventListener('click', () => {
            if (validateGrid()) {
                crosswordGrid.classList.add('success');
                setTimeout(() => {
                    crosswordGrid.classList.remove('success');
                }, 3000);
            }
        });

        // Clear grid button
        document.querySelector('.clear-grid').addEventListener('click', () => {
            const cells = document.querySelectorAll('.cell:not(.blocked)');
            cells.forEach(cell => {
                const input = cell.querySelector('input');
                if (input) {
                    input.value = '';
                }
                cell.classList.remove('correct', 'incorrect');
            });
            crosswordGrid.classList.remove('success');
        });

        // Auto-validate on input for intersection cells
        document.querySelectorAll('.cell[data-word*=","]').forEach(cell => {
            const input = cell.querySelector('input');
            if (input) {
                input.addEventListener('input', () => {
                    validateGrid();
                });
            }
        });
    });
</script>

<style>
    :root {
        --font-serif: "EB Garamond", Georgia, serif;
        --font-title: "Playfair Display", "Times New Roman", serif;
        --font-sans: "Manrope", system-ui, sans-serif;
    }

    .newspaper-header {
        border-bottom: 3px double var(--grey11);
        margin-bottom: 2rem;
        padding: 1rem 0;
        background-color: white;
        background-image:
            radial-gradient(var(--grey13) 1px, transparent 1px),
            radial-gradient(var(--grey13) 1px, transparent 1px);
        background-size: 20px 20px;
        background-position: 0 0, 10px 10px;
    }

    .top-banner {
        display: grid;
        grid-template-columns: 1fr auto 1fr;
        align-items: center;
        gap: 2rem;
        padding: 0 2rem;
        margin-bottom: 1rem;
    }

    .edition-info, .price-info {
        display: flex;
        flex-direction: column;
        align-items: center;
        font-family: var(--font-serif);
        text-transform: uppercase;
        font-size: 1rem;
        color: var(--grey3);
        gap: 0.5rem;
    }

    .masthead {
        text-align: center;
        padding: 1rem 0;
    }

    .masthead-top {
        font-family: var(--font-serif);
        font-size: 1.5rem;
        font-weight: 500;
        margin-bottom: -0.5rem;
    }

    .masthead-main {
        font-family: var(--font-title);
        font-size: 4.5rem;
        font-weight: 900;
        line-height: 1;
        letter-spacing: -0.02em;
        margin: 0.5rem 0;
        color: var(--grey1);
    }

    .masthead-motto {
        font-family: var(--font-serif);
        font-style: italic;
        font-size: 1rem;
        color: var(--grey6);
        margin-top: 0.5rem;
        border-top: 1px solid var(--grey11);
        padding-top: 0.5rem;
        max-width: 80%;
        margin: 0.5rem auto 0;
    }

    .date-banner {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 2rem;
        background-color: var(--grey1);
        color: white;
        font-family: var(--font-serif);
        margin-top: 1rem;
        position: relative;
    }

    .date-section, .weather-section {
        display: flex;
        align-items: center;
        gap: 1rem;
        font-size: 1.2rem;
        letter-spacing: 0.05em;
    }

    .day-name {
        font-weight: 700;
    }

    .date-divider {
        font-weight: bold;
        color: var(--grey11);
    }

    .weather-info, .forecast {
        font-size: 1.1rem;
    }

    .date-banner::after {
        content: "";
        position: absolute;
        bottom: -3px;
        left: 0;
        right: 0;
        height: 1px;
        background: var(--grey11);
    }

    /* Restore original body styling */
    .newspaper-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        grid-template-rows: auto auto auto;
        gap: 2rem;
        padding: 2rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    .bento-item {
        background: white;
        border: 1px solid var(--grey11);
        padding: 1.5rem;
        font-family: 'Georgia', serif;
    }

    /* Column Headers Styling */
    .column-header {
        font-family: var(--font-title);
        font-size: 2rem;
        font-weight: 900;
        margin-bottom: 1.5rem;
        color: var(--grey1);
        letter-spacing: -0.02em;
        line-height: 1.2;
        border-bottom: 2px solid var(--grey11);
        padding-bottom: 0.75rem;
    }

    /* Lead Story */
    .lead-story {
        grid-column: 1 / span 2;
        grid-row: 1;
    }

    .headline-box {
        border-bottom: 3px double var(--grey11);
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
    }

    .lead-story h1 {
        font-family: var(--font-title);
        font-size: 3.2rem;
        line-height: 1.1;
        margin-bottom: 0.8rem;
        font-weight: 700;
        color: var(--grey1);
    }

    .subheading {
        font-size: 1.6rem;
        font-family: var(--font-serif);
        font-style: italic;
        color: var(--grey3);
        margin-bottom: 0.5rem;
        line-height: 1.2;
    }

    .byline {
        font-style: italic;
        color: var(--grey6);
        font-size: 0.95rem;
        border-top: 1px solid var(--grey11);
        padding-top: 0.5rem;
        margin-top: 0.5rem;
    }

    .story-content {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 2rem;
        margin-bottom: 2rem;
        position: relative;
    }

    .story-content::after {
        content: '';
        position: absolute;
        top: 0;
        bottom: 0;
        left: calc(66.66% + 1rem);
        width: 2px;
        background: var(--grey11);
        opacity: 0.8;
    }

    .story-text {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .story-image {
        position: relative;
        overflow: hidden;
        border: 2px solid var(--grey11);
        padding: 0.5rem;
        background: white;
        box-shadow: none;
    }

    .story-image img {
        width: 100%;
        aspect-ratio: 16/9;
        object-fit: cover;
        filter: grayscale(80%);
        transition: all 0.3s ease;
    }

    .story-image:hover img {
        filter: grayscale(0%);
        transform: scale(1.02);
    }

    .image-caption {
        font-family: var(--font-serif);
        font-size: 0.85rem;
        font-style: italic;
        color: var(--grey6);
        margin-top: 0.75rem;
        text-align: center;
        line-height: 1.4;
        padding: 0 0.5rem;
    }

    .lead-paragraph {
        font-size: 1.1rem;
        line-height: 1.7;
        text-align: justify;
    }

    .first-paragraph::first-letter {
        font-family: var(--font-title);
        font-size: 3.5rem;
        float: left;
        line-height: 1;
        padding: 0.2rem 0.5rem 0 0;
        color: var(--grey1);
    }

    .story-sidebar {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        padding-left: 2rem;
    }

    .quick-facts {
        background: transparent;
        padding: 1.5rem;
        border: 2px solid var(--grey11);
    }

    .quick-facts h3 {
        font-family: var(--font-title);
        font-size: 1.2rem;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid var(--grey11);
    }

    .quick-facts ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .quick-facts li {
        position: relative;
        padding-left: 1.2rem;
        margin-bottom: 0.8rem;
        line-height: 1.4;
        font-size: 1rem;
    }

    .quick-facts li::before {
        content: "→";
        position: absolute;
        left: 0;
        color: var(--grey8);
    }

    .featured-quote {
        background: transparent;
        padding: 1.5rem;
        border: 2px solid var(--grey11);
    }

    .featured-quote blockquote {
        font-family: var(--font-serif);
        font-size: 1.2rem;
        font-style: italic;
        color: var(--grey6);
        margin: 0;
        padding: 0;
        line-height: 1.6;
        position: relative;
    }

    .featured-quote blockquote::before,
    .featured-quote blockquote::after {
        content: '"';
        font-family: var(--font-title);
        font-size: 2rem;
        color: var(--grey8);
        position: absolute;
    }

    .featured-quote blockquote::before {
        left: -0.5rem;
        top: -0.5rem;
    }

    .featured-quote blockquote::after {
        right: -0.5rem;
        bottom: -1rem;
    }

    .continue-reading {
        font-family: var(--font-serif);
        font-style: italic;
        color: var(--grey3);
        text-decoration: none;
        border-bottom: 1px solid var(--grey11);
        display: inline-block;
        padding-bottom: 0.2rem;
        transition: all 0.2s ease;
    }

    .continue-reading:hover {
        color: var(--grey1);
        border-bottom-color: var(--grey1);
    }

    /* Latest Dispatches Styling */
    .news-scroll-container {
        display: flex;
        flex-direction: column;
        gap: 2rem;
        padding-right: 1.5rem;
    }

    .news-item {
        padding: 1.8rem;
        background: white;
        transition: all 0.3s ease;
        position: relative;
        cursor: pointer;
        border-bottom: 1px solid var(--grey12);
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.02);
    }

    .news-item:hover {
        transform: translateX(5px) translateY(-2px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.08);
    }

    .news-item-header {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .news-meta-top {
        display: flex;
        align-items: center;
        gap: 1rem;
        font-family: var(--font-sans);
        font-size: 0.9rem;
        color: var(--grey6);
    }

    .news-date {
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .news-category {
        position: relative;
        padding-left: 1rem;
    }

    .news-category::before {
        content: '•';
        position: absolute;
        left: 0;
        color: var(--grey8);
    }

    .news-title {
        font-family: var(--font-title);
        font-size: 1.6rem;
        font-weight: 700;
        color: var(--grey2);
        margin: 0;
        line-height: 1.2;
        transition: color 0.3s ease;
    }

    .news-title a {
        text-decoration: none;
        color: inherit;
    }

    .news-item:hover .news-title {
        color: var(--grey1);
    }

    .news-excerpt {
        font-family: var(--font-serif);
        font-size: 1.1rem;
        color: var(--grey4);
        line-height: 1.6;
        margin-bottom: 1.2rem;
    }

    .news-meta-bottom {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-family: var(--font-sans);
        font-size: 0.9rem;
        color: var(--grey6);
    }

    .read-time {
        display: flex;
        align-items: center;
        gap: 0.3rem;
    }

    .news-section {
        background: white;
        padding: 2.5rem;
        position: relative;
        isolation: isolate;
        background-image:
            radial-gradient(var(--grey13) 1px, transparent 1px),
            radial-gradient(var(--grey13) 1px, transparent 1px);
        background-size: 20px 20px;
        background-position: 0 0, 10px 10px;
    }

    .news-section::before {
        content: '';
        position: absolute;
        inset: 0;
        background: linear-gradient(to right,
            rgba(255, 255, 255, 0.98),
            rgba(255, 255, 255, 0.95)
        );
        z-index: -1;
    }

    .column-header {
        font-family: var(--font-title);
        font-size: 2rem;
        font-weight: 900;
        margin-bottom: 2rem;
        text-align: center;
        position: relative;
        padding-bottom: 1rem;
    }

    .column-header::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 60px;
        height: 3px;
        background: var(--grey8);
    }

    /* Tech Quote Section Styling */
    .news-quote-container {
        grid-column: 3;
        grid-row: 1;
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .news-section {
        flex: 1;
        border: 3px solid var(--grey11);
        padding: 1.5rem;
    }

    .tech-quote-section {
        border: 3px solid var(--grey11);
        padding: 1.5rem;
        background: var(--grey1);
        display: flex;
        flex-direction: column;
        justify-content: center;
        min-height: 200px;
    }

    .tech-quote-section .quote-content {
        text-align: center;
        color: var(--grey13);
    }

    .tech-quote-section blockquote {
        font-family: var(--font-serif);
        font-size: 1.25rem;
        font-style: italic;
        margin: 0;
        color: white;
    }

    .tech-quote-section cite {
        display: block;
        margin-top: 1rem;
        font-size: 0.9rem;
        font-style: normal;
        color: var(--grey7);
    }

    /* Tech Bulletin */
    .tech-bulletin {
        grid-column: 1;
        grid-row: 2;
    }

    .bulletin-grid {
        display: grid;
        gap: 1rem;
    }

    .bulletin-item {
        padding: 1rem;
        background: var(--grey13);
    }

    .bulletin-item h3 {
        font-size: 1.2rem;
        color: var(--grey1);
        margin-bottom: 0.75rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-family: var(--font-sans);
    }

    .bulletin-item p {
        font-size: 1.1rem;
        color: var(--grey2);
        margin-bottom: 0.5rem;
        font-weight: 500;
        font-family: var(--font-serif);
    }

    /* Project Highlights */
    .project-highlights {
        grid-column: span 6;
    }

    .highlights-content {
        display: grid;
        grid-template-columns: 1fr 2px 1fr;
        gap: 1.5rem;
    }

    .highlight-separator {
        background: var(--grey11);
    }

    .highlight h4 {
        font-family: var(--font-title);
        font-size: 1.3rem;
        margin: 0.5rem 0;
        font-weight: 700;
    }

    .highlight p {
        font-family: var(--font-serif);
        font-size: 1.1rem;
        line-height: 1.5;
    }

    /* Quick Reference */
    .quick-reference {
        grid-column: 1 / span 2;
        grid-row: 3;
    }

    .reference-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 1rem;
    }

    .ref-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        padding: 1rem;
        background: var(--grey13);
        text-decoration: none;
        color: var(--grey2);
        transition: all 0.2s ease;
    }

    .ref-item:hover {
        background: var(--grey12);
        transform: translateY(-2px);
    }

    .ref-text {
        font-family: var(--font-serif);
        font-size: 1.1rem;
    }

    @media (max-width: 1200px) {
        .newspaper-grid {
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
            padding: 1.5rem;
        }

        .lead-story {
            grid-column: 1 / span 2;
            grid-row: 1;
        }

        .news-quote-container {
            grid-column: 1 / span 2;
            grid-row: 2;
        }

        .tech-bulletin {
            grid-column: 1;
            grid-row: 3;
        }

        .whats-happening {
            grid-column: 2;
            grid-row: 3;
        }

        .daily-crossword {
            grid-column: 2;
            grid-row: 4;
        }

        .quick-reference {
            grid-column: 1;
            grid-row: 4;
        }
    }

    @media (max-width: 768px) {
        .newspaper-grid {
            grid-template-columns: 1fr;
            gap: 1rem;
            padding: 1rem;
        }

        .lead-story,
        .news-quote-container,
        .tech-bulletin,
        .whats-happening,
        .daily-crossword,
        .quick-reference {
            grid-column: 1;
        }

        .lead-story { grid-row: 1; }
        .news-quote-container { grid-row: 2; }
        .tech-bulletin { grid-row: 3; }
        .whats-happening { grid-row: 4; }
        .quick-reference { grid-row: 5; }
        .daily-crossword { grid-row: 6; }
    }
    .news-and-quote-column {
    grid-column: span 3;
    grid-row: span 3;
    display: flex;
    flex-direction: column;
    gap: 2rem;
}

.news-scroll-container {
    flex: 1;
    overflow-y: auto;
    max-height: 500px;
    padding-right: 1rem;
    scrollbar-width: none;  /* Firefox */
    -ms-overflow-style: none;  /* IE and Edge */
}
.news-scroll-container::-webkit-scrollbar {
    display: none;  /* Chrome, Safari and Opera */
}
/* Daily Crossword Styles */
.daily-crossword {
    grid-column: 3;
    grid-row: 3;
    align-self: end;
    margin-bottom: 0;
    background: var(--grey1);
    border: 3px solid var(--grey11);
    padding: 1.5rem;
}

.crossword-container {
    display: flex;
    gap: 2rem;
    padding: 1rem;
    justify-content: center;
}

.crossword-grid {
    flex: 0 0 auto;
    display: flex;
    flex-direction: column;
    gap: 1px;
    background: var(--grey11);
    padding: 1px;
    width: fit-content;
}

.grid-row {
    display: flex;
    gap: 1px;
}

.cell {
    width: 45px;
    height: 45px;
    background: white;
    border: 1px solid var(--grey11);
    position: relative;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

.cell input {
    width: 80%;
    height: 80%;
    border: none;
    background: transparent;
    text-align: center;
    font-size: 1.3rem;
    font-family: var(--font-mono);
    text-transform: uppercase;
    color: #000000;
    cursor: pointer;
    font-weight: 700;
}

.cell input:focus {
    outline: none;
    background: transparent;
    color: #000000;
}

.cell input.correct {
    color: #2ecc71;
    font-weight: bold;
}

.cell input.incorrect {
    color: #e74c3c;
    font-weight: bold;
}

.cell.blocked {
    background: var(--grey11);
    cursor: default;
}

.cell .number {
    position: absolute;
    top: 2px;
    left: 2px;
    font-size: 1rem;
    color: #000000;
    font-family: var(--font-sans);
    font-weight: 800;
    pointer-events: none;
}

.cell:focus-within {
    border-color: var(--grey13);
    box-shadow: 0 0 0 2px var(--grey13);
}

.game-controls {
    display: flex;
    gap: 1.5rem;
    margin-top: 1rem;
}

.game-controls button {
    padding: 0.8rem 1.5rem;
    border: 2px solid var(--grey11);
    background: var(--grey1);
    color: var(--grey13);
    font-family: var(--font-sans);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    border-radius: 4px;
}

.game-controls button:hover {
    background: var(--grey13);
    color: var(--grey1);
    border-color: var(--grey13);
}

.game-controls button.check-answers {
    background: var(--grey13);
    color: var(--grey1);
}

.game-controls button.check-answers:hover {
    background: var(--grey1);
    color: var(--grey13);
}

.game-controls button.clear-grid {
    background: var(--grey13);
    color: var(--grey1);
}

.game-controls button.clear-grid:hover {
    background: #cc0000;
    color: var(--white);
}

.crossword-clues {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    min-width: 300px;
}

.clues-section h3 {
    font-family: var(--font-title);
    font-size: 1.4rem;
    color: var(--grey13);
    margin-bottom: 1.2rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid var(--grey11);
}

.clues-section ol {
    list-style-position: inside;
    padding: 0;
}

.clues-section li {
    font-family: var(--font-serif);
    font-size: 1.1rem;
    color: var(--grey11);
    margin-bottom: 1rem;
    cursor: pointer;
    transition: color 0.2s ease;
    line-height: 1.4;
}

.clues-section li:hover {
    color: var(--grey13);
}

@media (max-width: 768px) {
    .crossword-container {
        flex-direction: column;
        align-items: stretch;
    }

    .game-section {
        order: 2;
    }

    .crossword-clues {
        order: 1;
        margin-bottom: 1.5rem;
    }

    .cell {
        width: 40px;
        height: 40px;
    }
}

.game-section {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
}

.crossword-grid {
    display: flex;
    flex-direction: column;
    gap: 1px;
    background: var(--grey11);
    padding: 1px;
    width: fit-content;
}

.grid-row {
    display: flex;
    gap: 1px;
}

.cell {
    width: 45px;
    height: 45px;
    background: white;
    border: 1px solid var(--grey11);
    position: relative;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

.cell input {
    width: 80%;
    height: 80%;
    border: none;
    background: transparent;
    text-align: center;
    font-size: 1.3rem;
    font-family: var(--font-mono);
    text-transform: uppercase;
    color: #000000;
    cursor: pointer;
    font-weight: 700;
}

.cell input:focus {
    outline: none;
    background: transparent;
    color: #000000;
}

.cell input.correct {
    color: #2ecc71;
    font-weight: bold;
}

.cell input.incorrect {
    color: #e74c3c;
    font-weight: bold;
}

.cell.blocked {
    background: var(--grey11);
    cursor: default;
}

.cell .number {
    position: absolute;
    top: 2px;
    left: 2px;
    font-size: 1rem;
    color: #000000;
    font-family: var(--font-sans);
    font-weight: 800;
    pointer-events: none;
}

.game-controls {
    display: flex;
    gap: 1.5rem;
    margin-top: 1rem;
}

.game-controls button {
    padding: 0.8rem 1.5rem;
    border: 2px solid var(--grey11);
    background: var(--grey1);
    color: var(--grey13);
    font-family: var(--font-sans);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    border-radius: 4px;
}

.game-controls button:hover {
    background: var(--grey13);
    color: var(--grey1);
    border-color: var(--grey13);
}

.game-controls button.check-answers {
    background: var(--grey13);
    color: var(--grey1);
}

.game-controls button.check-answers:hover {
    background: var(--grey1);
    color: var(--grey13);
}

.game-controls button.clear-grid {
    background: var(--grey13);
    color: var(--grey1);
}

.game-controls button.clear-grid:hover {
    background: #cc0000;
    color: var(--white);
}

.crossword-clues {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    min-width: 300px;
}

.clues-section h3 {
    font-family: var(--font-title);
    font-size: 1.4rem;
    color: var(--grey13);
    margin-bottom: 1.2rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid var(--grey11);
}

.clues-section ol {
    list-style-position: inside;
    padding: 0;
}

.clues-section li {
    font-family: var(--font-serif);
    font-size: 1.1rem;
    color: var(--grey11);
    margin-bottom: 1rem;
    cursor: pointer;
    transition: color 0.2s ease;
    line-height: 1.4;
}

.clues-section li:hover {
    color: var(--grey13);
}

@media (max-width: 768px) {
    .crossword-container {
        flex-direction: column;
        align-items: stretch;
    }

    .game-section {
        order: 2;
    }

    .crossword-clues {
        order: 1;
        margin-bottom: 1.5rem;
    }

    .cell {
        width: 40px;
        height: 40px;
    }
}

@keyframes winner-cell {
    0% {
        transform: scale(1);
        background: white;
    }
    50% {
        transform: scale(1.1);
        background: #4CAF50;
    }
    100% {
        transform: scale(1);
        background: white;
    }
}

@keyframes winner-text {
    0% {
        opacity: 0;
        transform: translateY(-20px);
    }
    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

.cell.winner {
    animation: winner-cell 0.5s ease-in-out;
}

.winner-message {
    display: none;
    position: absolute;
    top: -60px;
    left: 50%;
    transform: translateX(-50%);
    background: #4CAF50;
    color: white;
    padding: 15px 30px;
    border-radius: 25px;
    font-size: 1.2em;
    font-weight: bold;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    z-index: 100;
}

.winner-message.show {
    display: block;
    animation: winner-text 0.5s ease-out forwards;
}

.game-section {
    position: relative;
}

@keyframes confetti {
    0% {
        transform: translateY(0) rotateZ(0);
        opacity: 1;
    }
    100% {
        transform: translateY(100vh) rotateZ(720deg);
        opacity: 0;
    }
}

.confetti {
    position: absolute;
    width: 10px;
    height: 10px;
    background: #ff0;
    opacity: 0;
}

.confetti.show {
    animation: confetti 1s ease-out forwards;
}
</style>

<style>
    .whats-happening {
        background: var(--grey3);
        border-radius: 16px;
        padding: 2rem;
        position: relative;
        overflow: hidden;
    }

    .whats-happening::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noise'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.8' numOctaves='4' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100' height='100' filter='url(%23noise)' opacity='0.08'/%3E%3C/svg%3E");
        opacity: 0.15;
        pointer-events: none;
    }

    .now-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 2rem;
        margin-top: 1.5rem;
        position: relative;
    }

    .now-item {
        background: var(--grey4);
        padding: 1.75rem;
        border-radius: 2px;
        position: relative;
        border: 1px solid var(--grey7);
        box-shadow: 3px 3px 0 var(--grey7);
        transition: all 0.2s ease;
    }

    .now-item::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noise'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.8' numOctaves='4' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100' height='100' filter='url(%23noise)' opacity='0.08'/%3E%3C/svg%3E");
        opacity: 0.1;
        pointer-events: none;
    }

    .now-item:hover {
        transform: translate(-2px, -2px);
        box-shadow: 5px 5px 0 var(--grey7);
    }

    .now-item h3 {
        font-family: var(--font-title);
        font-size: 1.2rem;
        margin: 0 0 1rem 0;
        color: var(--grey12);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        border-bottom: 2px solid var(--grey7);
        padding-bottom: 0.5rem;
        letter-spacing: 0.5px;
    }

    .now-item p {
        font-family: var(--font-serif);
        font-size: 1.4rem;
        margin: 0 0 0.75rem 0;
        color: var(--grey12);
        line-height: 1.4;
        font-weight: 600;
    }

    .now-item small {
        font-family: var(--font-serif);
        font-size: 1rem;
        color: var(--grey11);
        display: block;
        line-height: 1.5;
        font-style: italic;
    }

    .column-header {
        font-family: var(--font-title);
        font-size: 1.75rem;
        color: var(--grey12);
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 3px double var(--grey7);
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    @media (max-width: 768px) {
        .whats-happening {
            padding: 1.5rem;
        }

        .now-grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        .now-item {
            padding: 1.5rem;
        }

        .now-item p {
            font-size: 1.3rem;
        }

        .column-header {
            font-size: 1.5rem;
        }
    }
</style>

<style>
    .tech-happening-wrapper {
        display: flex;
        gap: 20px;
        width: 100%;
    }

    .tech-bulletin {
        flex: 1;
        min-width: 25%;
    }

    .whats-happening {
        flex: 3;
    }

    @media (max-width: 768px) {
        .tech-happening-wrapper {
            flex-direction: column;
        }

        .tech-bulletin,
        .whats-happening {
            width: 100%;
        }
    }
</style>
